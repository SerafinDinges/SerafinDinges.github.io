{"version":3,"sources":["Header/Header.tsx","Main/Graph/Graph.tsx","util/API.tsx","Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","React","Component","Graph","Fragment","this","props","type","data","dataKey","keys","map","key","console","log","className","aspect","buildGraph","csv","require","API","tabletop","Tabletop","init","simpleSheet","name","then","elements","fetch","response","text","fromString","jsonObj","filter","line","iso_code","Main","state","sheetData","worldData","api","getSheet","setState","getWorldData","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"seAaeA,G,8KARP,OACI,gCACA,+C,GAJSC,IAAMC,Y,wBC4CZC,E,8KAlCP,OAAO,kBAAC,IAAMC,SAAP,Q,mCAKP,GAAwB,cAApBC,KAAKC,MAAMC,KACX,OACI,kBAAC,IAAD,CACIC,KAAMH,KAAKC,MAAME,MAEjB,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACCJ,KAAKC,MAAMI,KAAKC,KAAI,SAAAC,GAEjB,OADAC,QAAQC,IAAIF,GACL,kBAAC,IAAD,CAAML,KAAK,WAAWK,IAAKA,EAAKH,QAASG,U,+BAMhE,OACI,yBAAKG,UAAU,SACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAqBC,OAAQ,KACxBX,KAAKY,oB,GA5BVhB,IAAMC,W,4CCTpBgB,EAAMC,EAAQ,KAmCLC,E,WA9BX,aAAe,yBADfC,cACc,EACVhB,KAAKgB,SAAWC,IAASC,KAAK,CAC1BX,IAAK,+CACLY,aAAa,I,8FAGNC,G,0FACJpB,KAAKgB,SAASK,MAAK,SAAClB,EAAMa,GAE7B,OADcb,EAAKiB,GAAME,a,+QAKtBC,MAAM,+FACRF,MAAK,SAAAG,GAAQ,OAAIA,EAASC,UAC1BJ,MAAK,SAAAG,GACF,OAAOX,IACFa,WAAWF,GACXH,MAAK,SAACM,GAKH,OAJAA,EAAUA,EAAQC,QAAO,SAAAC,GACrB,MAAqB,QAAlBA,EAAKC,mB,wGCoBrBC,E,kDAtCX,WAAY9B,GAAQ,IAAD,8BACf,cAAMA,IACD+B,MAAQ,CACTC,UAAW,GACXC,UAAW,IAJA,E,gEAOE,IAAD,OACZC,EAAM,IAAIpB,EACdoB,EAAIC,SAAS,eAAef,MAAK,SAAClB,GAC9B,EAAKkC,SAAS,CACVJ,UAAW9B,OAGnBgC,EAAIG,eAAejB,MAAK,SAAClB,GACrBK,QAAQC,IAAI,YAAaN,GAEzB,EAAKkC,SAAS,CACVH,UAAW/B,S,+BAKnB,OACI,yBAAKO,UAAU,QACX,6OAGA,kBAAC,EAAD,CAAOP,KAAMH,KAAKgC,MAAMC,UAAW5B,KAAM,CAAC,KAAK,MAAOH,KAAK,cAC3D,6OAGA,kBAAC,EAAD,CAAOC,KAAMH,KAAKgC,MAAME,UAAW7B,KAAM,CAAC,eAAgBH,KAAK,mB,GAjC5DN,IAAMC,W,OCMV0C,MATf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.d82c448b.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <header>\n            <h1>someta.xyz</h1>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n\n","import React from 'react';\n\nimport './Graph.css';\n\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\n\ntype MyProps = { data: Array<any>, type: String, keys: Array<String> };\ntype MyState = {};\n\nclass Graph extends React.Component<MyProps, MyState> {\n    getDecoration() {\n        return <React.Fragment>\n\n        </React.Fragment>;\n    }\n    buildGraph() {\n        if (this.props.type === \"LineChart\") {\n            return (\n                <LineChart\n                    data={this.props.data}>\n                    {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    {this.props.keys.map(key => {\n                        console.log(key);\n                        return <Line type=\"monotone\" key={key} dataKey={key} />\n                    })}\n                </LineChart>);\n        }\n    }\n    render() {\n        return (\n            <div className=\"Graph\">\n                <div className=\"container\">\n                    <ResponsiveContainer aspect={1.5}>\n                        {this.buildGraph()}\n                    </ResponsiveContainer>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Graph;\n\n","\nimport Tabletop from 'tabletop';\nconst csv = require('csvtojson/v2');\n\n\nclass API {\n    tabletop: Tabletop;\n    constructor() {\n        this.tabletop = Tabletop.init({\n            key: '1sAXPISlxdaxPIUAkua6Dxdd5DeWlUQ3fzx6Q9aGzfxY',\n            simpleSheet: false\n        });\n    }\n    async getSheet(name) {\n        return this.tabletop.then((data, tabletop: Tabletop) => {\n            let entries = data[name].elements;\n            return entries;\n        });\n    }\n    async getWorldData() {\n        return fetch('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv')\n            .then(response => response.text())\n            .then(response => {\n                return csv()\n                    .fromString(response)\n                    .then((jsonObj) => {\n                        jsonObj = jsonObj.filter(line => {\n                            if(line.iso_code === \"DEU\") return true;\n                            return false;\n                        })\n                        return jsonObj;\n                    });\n            });\n\n    }\n}\n\nexport default API;\n","import React from 'react';\nimport './Main.css';\nimport Graph from \"./Graph/Graph\";\nimport API from \"../util/API\";\n\ntype MyProps = {};\ntype MyState = { sheetData: Array<any>, worldData: Array<any> };\n\nclass Main extends React.Component<MyProps, MyState> {\n    constructor(props) {\n        super(props)\n        this.state = {\n            sheetData: [],\n            worldData: []\n        }\n    }\n    componentDidMount() {\n        let api = new API();\n        api.getSheet(\"cvd19_cases\").then((data) => {\n            this.setState({\n                sheetData: data\n            })\n        });\n        api.getWorldData().then((data) => {\n            console.log(\"worlddata\", data);\n            \n            this.setState({\n                worldData: data\n            })\n        });\n    }\n    render() {\n        return (\n            <div className=\"Main\">\n                <p>\n                    Lorem ipsum dolor sit amet consectetur adipisicing elit. Quo nisi inventore voluptates accusantium, quam beatae obcaecati ex ab quasi? Nobis earum nulla impedit hic quae, corporis eaque voluptate qui culpa.\n                </p>\n                <Graph data={this.state.sheetData} keys={[\"de\",\"en\"]} type=\"LineChart\"/>\n                <p>\n                    Lorem ipsum dolor sit amet consectetur adipisicing elit. Quo nisi inventore voluptates accusantium, quam beatae obcaecati ex ab quasi? Nobis earum nulla impedit hic quae, corporis eaque voluptate qui culpa.\n                </p>\n                <Graph data={this.state.worldData} keys={[\"total_cases\"]} type=\"LineChart\"/>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n\n","import React from 'react';\nimport Header from './Header/Header';\nimport Main from './Main/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}