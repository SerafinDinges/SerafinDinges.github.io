{"version":3,"sources":["Header/Header.tsx","Main/Graph/Graph.tsx","util/API.tsx","util/DataProvider.tsx","Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","React","Component","Graph","colors","Fragment","this","props","type","data","dataWrapper","strokeDasharray","stroke","dataKey","labels","xAxis","dataKeys","map","key","index","className","aspect","buildGraph","csv","require","API","tabletop","worldData","Tabletop","init","simpleSheet","name","then","elements","countries","fetch","response","text","fromString","worldDataRaw","filter","line","total_cases","totalCases","forEach","includes","iso_code","date","total_deaths","prettyDate","Date","getDay","getMonth","arr","Object","keys","push","DataProvider","getCVD19CasesByCountry","cvd19deaths","wrapper","sort","first","second","firstDate","secondDate","getTime","country","getSheet","respiratoryDeaths","helperObjectRespiratoryDeaths","element","aggregatedData","time","uk_total_deaths","uk_total_sum","uk_respiratory_deaths","uk_respiratory_sum","console","log","Main","countryOptions","selected","value","label","state","sheetData","ukDeaths","customDeaths","compareCountries","getUKDeaths","setState","getCasesByCountry","e","target","checked","concat","indexOf","splice","processState","el","onChange","handleChange","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c2fec4b7.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <header>\n            <h1>someta.xyz</h1>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n\n","import React from 'react';\n\nimport './Graph.css';\n\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\n\ntype MyProps = { dataWrapper: {\n    data: Array<any>,\n    labels: any\n}, type: String };\ntype MyState = {};\n\nclass Graph extends React.Component<MyProps, MyState> {\n    // colors = [\"#E0BBE4\",\"#957DAD\",\"#D291BC\",\"#FEC8D8\",\"#FFDFD3\"];\n    colors = [\"#998AD3\",\"#E494D3\",\"#CDF1AF\",\"#87DCC0\",\"#88BBE4\"];\n    getDecoration() {\n        return <React.Fragment>\n\n        </React.Fragment>;\n    }\n    buildGraph() {\n        if (this.props.type === \"LineChart\") {\n            return (\n                <LineChart\n                    data={this.props.dataWrapper.data}>\n                    <CartesianGrid strokeDasharray=\"5 5\" stroke=\"#eee\" />\n                    <XAxis dataKey={this.props.dataWrapper.labels.xAxis} />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    {this.props.dataWrapper.labels.dataKeys.map((key, index) => {\n                        return <Line type=\"monotone\" key={key} dataKey={key} stroke={this.colors[index]} />\n                    })}\n                </LineChart>);\n        }\n    }\n    render() {\n        return (\n            <div className=\"Graph\">\n                <div className=\"container\">\n                    <ResponsiveContainer aspect={1.6}>\n                        {this.buildGraph()}\n                    </ResponsiveContainer>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Graph;\n\n","\nimport Tabletop from 'tabletop';\nconst csv = require('csvtojson/v2');\n\n\nclass API {\n    tabletop: Tabletop;\n    worldData: any;\n    constructor() {\n        this.tabletop = Tabletop.init({\n            key: '1sAXPISlxdaxPIUAkua6Dxdd5DeWlUQ3fzx6Q9aGzfxY',\n            simpleSheet: false\n        });\n        this.worldData = false;\n    }\n    async getSheet(name) {\n        return this.tabletop.then((data, tabletop: Tabletop) => {\n            let entries = data[name].elements;\n            return entries;\n        });\n    }\n    async getCVD19CasesByCountry(countries: Array<String>) { // ISO CODES: \"GBR\", \"DEU\", \"USA\"\n        // iso_code,location,date,total_cases,new_cases,total_deaths,new_deaths,total_cases_per_million,new_cases_per_million,total_deaths_per_million,new_deaths_per_million,total_tests,new_tests,total_tests_per_thousand,new_tests_per_thousand,tests_units\n        if (!this.worldData)\n            this.worldData = fetch('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv')\n                .then(response => response.text());\n        return this.worldData.then(response => {\n            return csv()\n                .fromString(response)\n                .then((worldDataRaw) => {\n                    worldDataRaw = worldDataRaw.filter(line => {\n                        if (line.total_cases > 999) return true; // only return data where total cases\n                        return false;\n                    })\n                    let totalCases = {};\n                    worldDataRaw.forEach(line => {\n                        if (countries.includes(line.iso_code)) {\n                            if (!totalCases[line.date]) totalCases[line.date] = { date: line.date };\n                            totalCases[line.date][line.iso_code + \"_cases\"] = line.total_cases / 1000; // -> total cases in magnitudes of 1000\n                            totalCases[line.date][line.iso_code + \"_deaths\"] = (line.total_deaths / 1); // -> total deaths in magnitudes of 100\n                            let prettyDate = new Date(line.date);\n                            totalCases[line.date].prettyDate = `${prettyDate.getDay()}. ${prettyDate.getMonth()}`;\n                        }\n                    });\n                    let arr = [] as any;\n                    Object.keys(totalCases).forEach((key) => {\n                        arr.push(totalCases[key]);\n                    });\n                    return arr;\n                });\n        });\n\n    }\n}\n\nexport default API;\n","import API from './API'\n\nclass DataProvider {\n    API: API;\n    constructor() {\n        this.API = new API();\n    }\n    async getCasesByCountry(countries: Array<String>) {\n        let cvd19deaths = await this.API.getCVD19CasesByCountry(countries);\n        let wrapper: any = {};\n        cvd19deaths = cvd19deaths.sort((first, second) => {\n            let firstDate = new Date(first.date), secondDate = new Date(second.date);\n            return firstDate.getTime() - secondDate.getTime();\n        });\n        wrapper.data = cvd19deaths;\n        let keys: Array<String> = [];\n        countries.forEach(country => {\n            // keys.push(country + \"_cases\");\n            keys.push(country + \"_deaths\");\n        });\n        wrapper.labels = {\n            xAxis: \"date\",\n            dataKeys: keys\n        };\n        return wrapper;\n    }\n    async getUKDeaths() {\n        let wrapper: any = {};\n        let cvd19deaths = await this.API.getCVD19CasesByCountry([\"GBR\"]);\n        let respiratoryDeaths = await this.API.getSheet(\"regular_flu_deaths\");\n        let helperObjectRespiratoryDeaths: any = {};\n        respiratoryDeaths.forEach(element => {\n            let date = new Date(element.date);\n            helperObjectRespiratoryDeaths[date.getDay() + \"-\" + date.getMonth()] = element;\n        });\n\n        let aggregatedData = cvd19deaths.map((element) => {\n            let date = new Date(element.date);\n            let time = date.getMonth() + \"-\" + date.getDay();\n\n            if (helperObjectRespiratoryDeaths[time]) {\n                element.uk_total_deaths = helperObjectRespiratoryDeaths[time].uk_total_sum;\n                element.uk_respiratory_deaths = helperObjectRespiratoryDeaths[time].uk_respiratory_sum;\n            }\n            return element;\n        });\n        console.log(aggregatedData);\n\n        wrapper.data = aggregatedData;\n        wrapper.labels = {\n            xAxis: \"date\",\n            dataKeys: [\"GBRcases\", \"GBRdeaths\", \"uk_total_deaths\", \"uk_respiratory_deaths\"]\n        };\n        return wrapper;\n    }\n}\n\nexport default DataProvider;\n","import React from 'react';\nimport './Main.css';\nimport Graph from \"./Graph/Graph\";\nimport DataProvider from \"../util/DataProvider\";\n\ntype MyProps = {};\ntype MyState = {\n    DataProvider: DataProvider,\n    compareCountries: any,\n    sheetData: Array<any>, customDeaths: any, ukDeaths: {\n        data: Array<any>,\n        labels: any\n    }\n};\n\nclass Main extends React.Component<MyProps, MyState> {\n    countryOptions = [\n        {\n            selected: false, value: 'USA', label: 'USA'\n        },\n        {\n            selected: false, value: 'GBR', label: 'United Kingdom'\n        },\n        {\n            selected: false, value: 'DEU', label: 'Germany'\n        },\n        {\n            selected: false, value: 'JPN', label: 'Japan'\n        },\n        {\n            selected: false, value: 'AUT', label: 'Austria'\n        }\n    ];\n    constructor(props) {\n        super(props)\n        this.state = {\n            sheetData: [],\n            ukDeaths: { data: [], labels: { dataKeys: [] } },\n            customDeaths: { data: [], labels: { dataKeys: [] } },\n            DataProvider: new DataProvider(),\n            compareCountries: []\n        }\n    }\n    componentDidMount() {\n        this.state.DataProvider.getUKDeaths().then((data) => {\n            this.setState({\n                ukDeaths: data\n            });\n        });\n        // .getSheet(\"regular_flu_deaths\").then((data) => {\n        //     console.log(\"sheetdata\", data);\n\n        //     this.setState({\n        //         sheetData: data\n        //     })\n        // });\n    }\n    processState() {\n        this.state.DataProvider.getCasesByCountry(this.state.compareCountries).then((data) => {\n            console.log(data);\n            \n            this.setState({\n                customDeaths: data\n            })\n        });\n    }\n    handleChange(e) {\n        let countries = this.state.compareCountries;\n        if (e.target.checked)\n            countries = countries.concat([e.target.value]);\n        else if (countries.indexOf(e.target.value) > -1)\n            countries.splice(countries.indexOf(e.target.value), 1);\n\n        this.setState({\n            compareCountries: countries\n        }, () => this.processState());\n    }\n    render() {\n        return (\n            <div className=\"Main\">\n                <p>\n                    Compare different countries with each other.\n                </p>\n                {this.countryOptions.map(el => {\n                    return <label key={el.value}><input onChange={this.handleChange.bind(this)} type=\"checkbox\" value={el.value} />{el.label}</label>;\n                })}\n                <Graph dataWrapper={this.state.customDeaths} type=\"LineChart\" />\n                {/* <Graph data={this.state.sheetData} keys={[\"uk_total_sum\",\"uk_respiratory_sum\"]} type=\"LineChart\"/> */}\n                <p>\n                    Lorem ipsum dolor sit amet consectetur adipisicing elit. Quo nisi inventore voluptates accusantium, quam beatae obcaecati ex ab quasi? Nobis earum nulla impedit hic quae, corporis eaque voluptate qui culpa.\n                </p>\n                <Graph dataWrapper={this.state.ukDeaths} type=\"LineChart\" />\n            </div>\n        );\n    }\n}\n\nexport default Main;\n\n","import React from 'react';\nimport Header from './Header/Header';\nimport Main from './Main/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}