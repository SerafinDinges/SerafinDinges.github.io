{"version":3,"sources":["Header/Header.tsx","Footer/Footer.tsx","Main/Graph/Graph.tsx","util/API.tsx","util/Dictionary.tsx","util/DataProvider.tsx","Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","target","rel","href","React","Component","Footer","Graph","props","colors","state","colorKey","countries","dataSets","key","countryIndex","this","substring","dataSetIndex","Math","floor","random","value","name","parseInt","toFixed","dataWrapper","metaData","entry","type","data","strokeDasharray","stroke","dataKey","labels","xAxis","formatter","getToolTip","bind","getLegend","dataKeys","map","getColor","className","aspect","buildGraph","dataSetHelper","counter","forEach","csv","require","API","tabletop","worldData","Tabletop","init","simpleSheet","then","elements","fetch","response","text","fromString","worldDataRaw","filter","line","total_cases","totalCases","includes","iso_code","date","total_deaths","new_deaths","new_cases","total_cases_per_million","new_cases_per_million","total_deaths_per_million","new_deaths_per_million","prettyDate","Date","getMonth","getDate","arr","Object","keys","push","dictionary","DataProvider","meta","country","dataSet","getMetaKey","getCVD19CasesByCountry","cvd19deaths","wrapper","sort","first","second","firstDate","secondDate","getTime","getMetaData","getSheet","respiratoryDeaths","helperObjectRespiratoryDeaths","element","getDay","aggregatedData","time","uk_total_deaths","uk_total_sum","uk_respiratory_deaths","uk_respiratory_sum","console","log","Main","sheetData","customDeaths","compareCountries","showDataSets","length","getCasesByCountryAndDataset","setState","e","checked","concat","indexOf","splice","processState","onChange","handleChange","handleChange2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f12808d6.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <header>\n                <h1>someta.xyz</h1>\n                <p>A tool to investigate data relating but not exclusive to Covid-19.</p>\n                <p><i>by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://serafin.tv\">Serafin Dinges</a></i></p>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n\n","import React from 'react';\nimport './Footer.css'\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <footer>\n                <hr />\n                <strong>Data sources:</strong>\n                <p>Biggest data source is <a rel=\"noopener noreferrer\" href=\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\" target=\"_blank\">this raw csv sheet</a> compiled by <i>Our World in Data</i>. See full documentation in <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/owid/covid-19-data/tree/master/public/data\">their repo</a>. They in turn get their data from the <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\"><i>European Centre for Disease Prevention and Control</i></a>.</p>\n                {/* <p>Additional data from:</p>\n                <ul>\n                    <li></li>\n                </ul> */}\n                <p>Peek at the source code: <a href=\"https://github.com/SerafinDinges/someta.xyz\">https://github.com/SerafinDinges/someta.xyz</a></p>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n\n","import React from 'react';\n\nimport './Graph.css';\n\nimport {\n    ComposedChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\n\ntype MyProps = {\n    dataWrapper: {\n        data: Array<any>,\n        labels: any,\n        metaData: any\n    }, type: String\n};\ntype MyState = {\n    colorKey: any\n};\n\nclass Graph extends React.Component<MyProps, MyState> {\n    colors = [\n\n        [\"#998AD3\", \"#E494D3\", \"#CDF1AF\", \"#87DCC0\", \"#88BBE4\"], // fallback\n        [\"#9E0C3C\", \"#B01135\", \"#CD1B2D\", \"#E82322\", \"#FB291B\"], // reds\n        [\"#B478FF\", \"#826DE8\", \"#8592FF\", \"#6D9AE8\", \"#78CCFF\"], // blues\n        [\"#5FFF63\", \"#4AE87A\", \"#7EE84A\", \"#52FFB7\", \"#C7FF52\"], // greens\n        [\"#FF4DF2\", \"#E83A85\", \"#BF3AE8\", \"#9E40FF\", \"#7440FF\"], // purples\n        [\"#FF8E59\", \"#E89751\", \"#FFC265\", \"#E8BB51\", \"#FFDE59\"], // oranges\n        [\"#FFEA56\", \"#E8C443\", \"#E8E543\", \"#FFC54A\", \"#CAFF4A\"], // yellows\n        [\"#E0BBE4\", \"#957DAD\", \"#D291BC\", \"#FEC8D8\", \"#FFDFD3\"] //unused\n    ]\n    constructor(props) {\n        super(props);\n        this.state = {\n            colorKey: {\n                countries: { \"GBR\": 1, \"USA\": 2, \"DEU\": 3, \"AUT\": 4, \"ITA\": 5, \"JPN\": 6, \"KOR\": 7 },\n                dataSets: {}\n            }\n        }\n    }\n    static getDerivedStateFromProps(props, state) {\n        let dataSetHelper = {};\n        let counter = 0;\n        props.dataWrapper.labels.dataKeys.forEach(key => {\n            if (!dataSetHelper[key.substring(3)]) {\n                dataSetHelper[key.substring(3)] = counter;\n                counter++;\n            }\n        });\n        return ({\n            colorKey: {\n                countries: state.colorKey.countries,\n                dataSets: dataSetHelper\n            }\n        });\n    }\n\n    getColor(key: String) {\n        let countryIndex = this.state.colorKey.countries[key.substring(0, 3)];\n        let dataSetIndex = this.state.colorKey.dataSets[key.substring(3)];\n        if (this.colors[countryIndex] && this.colors[countryIndex][dataSetIndex]) return this.colors[countryIndex][dataSetIndex];\n        else return this.colors[0][Math.floor(Math.random() * 5)];\n    }\n    getToolTip(value, name) {\n        return [parseInt(value).toFixed(0), this.props.dataWrapper.metaData[name]];\n    }\n    getLegend(value, entry) {\n        return this.props.dataWrapper.metaData[value];\n    }\n    buildGraph() {\n        if (this.props.type === \"LineChart\") {\n            return (\n                <ComposedChart\n                    data={this.props.dataWrapper.data}>\n                    <CartesianGrid strokeDasharray=\"5 5\" stroke=\"#eee\" />\n                    <XAxis dataKey={this.props.dataWrapper.labels.xAxis} />\n                    <YAxis />\n                    <Tooltip formatter={this.getToolTip.bind(this)} />\n                    <Legend formatter={this.getLegend.bind(this)} />\n                    {this.props.dataWrapper.labels.dataKeys.map((key) => {\n                        return <Line type=\"monotone\" key={key} dataKey={key} stroke={this.getColor(key)} />\n                    })}\n                </ComposedChart>);\n        }\n    }\n    render() {\n        return (\n            <div className=\"Graph\">\n                <div className=\"container\">\n                    <ResponsiveContainer aspect={1.9}>\n                        {this.buildGraph()}\n                    </ResponsiveContainer>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Graph;\n\n","\nimport Tabletop from 'tabletop';\nconst csv = require('csvtojson/v2');\n\n\nclass API {\n    tabletop: Tabletop;\n    worldData: any;\n    constructor() {\n        this.tabletop = Tabletop.init({\n            key: '1sAXPISlxdaxPIUAkua6Dxdd5DeWlUQ3fzx6Q9aGzfxY',\n            simpleSheet: false\n        });\n        this.worldData = false;\n    }\n    async getSheet(name) {\n        return this.tabletop.then((data, tabletop: Tabletop) => {\n            let entries = data[name].elements;\n            return entries;\n        });\n    }\n    async getCVD19CasesByCountry(countries: Array<String>) { // ISO CODES: \"GBR\", \"DEU\", \"USA\"\n        // iso_code,location,date,total_cases,new_cases,total_deaths,new_deaths,total_cases_per_million,new_cases_per_million,total_deaths_per_million,new_deaths_per_million,total_tests,new_tests,total_tests_per_thousand,new_tests_per_thousand,tests_units\n        if (!this.worldData)\n            this.worldData = fetch('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv')\n                .then(response => response.text());\n        return this.worldData.then(response => {\n            return csv()\n                .fromString(response)\n                .then((worldDataRaw) => {\n                    worldDataRaw = worldDataRaw.filter(line => {\n                        if (line.total_cases > 999) return true; // only return data where total cases\n                        return false;\n                    })\n                    let totalCases = {};\n                    worldDataRaw.forEach(line => {\n                        if (countries.includes(line.iso_code)) {\n                            if (!totalCases[line.date]) {\n                                totalCases[line.date] = { date: line.date };\n                            }\n                            totalCases[line.date][line.iso_code + \"_total_cases\"] = line.total_cases / 1000; // -> total cases in magnitudes of 1000\n                            totalCases[line.date][line.iso_code + \"_total_deaths\"] = (line.total_deaths / 1); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_new_deaths\"] = (line.new_deaths / 1); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_new_cases\"] = (line.new_cases / 1); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_total_cases_per_million\"] = (line.total_cases_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_new_cases_per_million\"] = (line.new_cases_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_total_deaths_per_million\"] = (line.total_deaths_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_new_deaths_per_million\"] = (line.new_deaths_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            let prettyDate = new Date(line.date);\n                            totalCases[line.date].prettyDate = `${prettyDate.getMonth()+1}-${prettyDate.getDate()}`;\n                        }\n                    });\n                    let arr = [] as any;\n                    Object.keys(totalCases).forEach((key) => {\n                        arr.push(totalCases[key]);\n                    });\n                    return arr;\n                });\n        });\n\n    }\n}\n\nexport default API;\n","export { getMetaKey as default, getDataSetLabel };\nexport const dictionary = {\n    countries: {\n        \"DEU\": \"Germany\",\n        \"GBR\": \"United Kingdom\",\n        \"AUT\": \"Austria\",\n        \"USA\": \"USA\",\n        \"JPN\": \"Japan\",\n        \"ITA\": \"Italy\",\n        \"KOR\": \"South Korea\",\n    },\n    dataSets: {\n        \"total_deaths\": \"Total deaths\",\n        \"new_deaths\": \"New deaths\",\n        \"total_cases\": \"Total cases (in thousands)\",\n        \"new_cases\": \"New cases\",\n        \"total_cases_per_million\": \"Total cases (per million inhabitants)\",\n        \"new_cases_per_million\": \"New cases (per million inhabitants)\",\n        \"total_deaths_per_million\": \"Total deaths (per million inhabitants)\",\n        \"new_deaths_per_million\": \"New deaths (per million inhabitants)\"\n    }\n};\nfunction getMetaKey(key: string) {\n    let country = key.substring(0, 3);\n    let dataSet = key.substring(4);\n    return `${dictionary.countries[country]}: ${dictionary.dataSets[dataSet]}`\n}\n\nfunction getDataSetLabel(key: string) {\n    if (dictionary.dataSets[key]) return dictionary.dataSets[key];\n    return \"Label not found\";\n}","import API from './API'\nimport getMetaKey from './Dictionary';\n\nclass DataProvider {\n    API: API;\n    constructor() {\n        this.API = new API();\n    }\n    getMetaData(keys) {\n        let meta = {};\n        keys.forEach((key) => {\n            meta[key] = getMetaKey(key);\n        });\n        return meta;\n    }\n    async getCasesByCountryAndDataset(countries: Array<String>, dataSets: Array<String>) {\n        let cvd19deaths = await this.API.getCVD19CasesByCountry(countries);\n        let wrapper: any = {};\n        cvd19deaths = cvd19deaths.sort((first, second) => {\n            let firstDate = new Date(first.date), secondDate = new Date(second.date);\n            return firstDate.getTime() - secondDate.getTime();\n        });\n        wrapper.data = cvd19deaths;\n        wrapper.labels = {\n            xAxis: \"prettyDate\"\n        };\n        wrapper.labels.dataKeys = [];\n        dataSets.forEach(dataKey => {\n            countries.forEach(country => {\n                wrapper.labels.dataKeys.push(country + \"_\" + dataKey);\n            })\n        });\n        wrapper.labels.dataKeys.sort();\n        wrapper.metaData = this.getMetaData(wrapper.labels.dataKeys);\n        return wrapper;\n    }\n    async getUKDeaths() {\n        let wrapper: any = {};\n        let cvd19deaths = await this.API.getCVD19CasesByCountry([\"GBR\"]);\n        let respiratoryDeaths = await this.API.getSheet(\"regular_flu_deaths\");\n        let helperObjectRespiratoryDeaths: any = {};\n        respiratoryDeaths.forEach(element => {\n            let date = new Date(element.date);\n            helperObjectRespiratoryDeaths[date.getDay() + \"-\" + date.getMonth()] = element;\n        });\n\n        let aggregatedData = cvd19deaths.map((element) => {\n            let date = new Date(element.date);\n            let time = date.getMonth() + \"-\" + date.getDay();\n\n            if (helperObjectRespiratoryDeaths[time]) {\n                element.uk_total_deaths = helperObjectRespiratoryDeaths[time].uk_total_sum;\n                element.uk_respiratory_deaths = helperObjectRespiratoryDeaths[time].uk_respiratory_sum;\n            }\n            return element;\n        });\n        console.log(aggregatedData);\n\n        wrapper.data = aggregatedData;\n        wrapper.labels = {\n            xAxis: \"date\",\n            dataKeys: [\"GBRcases\", \"GBRdeaths\", \"uk_total_deaths\", \"uk_respiratory_deaths\"]\n        };\n        return wrapper;\n    }\n}\n\nexport default DataProvider;\n","import React from 'react';\nimport './Main.css';\nimport Graph from \"./Graph/Graph\";\nimport DataProvider from \"../util/DataProvider\";\nimport { dictionary } from \"../util/Dictionary\";\n\ntype MyProps = {};\ntype MyState = {\n    DataProvider: DataProvider,\n    compareCountries: any,\n    showDataSets: any,\n    sheetData: Array<any>, customDeaths: any\n};\n\nclass Main extends React.Component<MyProps, MyState> {\n    constructor(props) {\n        super(props)\n        this.state = {\n            sheetData: [],\n            customDeaths: { data: [], labels: { dataKeys: [] } },\n            DataProvider: new DataProvider(),\n            compareCountries: [],\n            showDataSets: []\n        }\n    }\n    processState() {\n        if (this.state.showDataSets.length > 0 && this.state.compareCountries.length > 0)\n            this.state.DataProvider.getCasesByCountryAndDataset(this.state.compareCountries, this.state.showDataSets).then((wrapper) => {\n                console.log(wrapper);\n                this.setState({\n                    customDeaths: wrapper\n                })\n            });\n    }\n    handleChange(e) {\n        let countries = this.state.compareCountries;\n        if (e.target.checked)\n            countries = countries.concat([e.target.value]);\n        else if (countries.indexOf(e.target.value) > -1)\n            countries.splice(countries.indexOf(e.target.value), 1);\n\n        this.setState({\n            compareCountries: countries\n        }, () => this.processState());\n    }\n    handleChange2(e) {\n        let dataSets = this.state.showDataSets;\n        if (e.target.checked)\n            dataSets = dataSets.concat([e.target.value]);\n        else if (dataSets.indexOf(e.target.value) > -1)\n            dataSets.splice(dataSets.indexOf(e.target.value), 1);\n        this.setState({\n            showDataSets: dataSets\n        }, () => this.processState());\n    }\n    render() {\n        return (\n            <div className=\"Main\">\n                <div className=\"text\">\n                    <p>\n                        Compare different countries with each other.\n                </p>\n                    <p>\n                        <strong>Choose countries</strong>\n                        {Object.keys(dictionary.countries).map((key) => {\n                            return <label key={key}><input onChange={this.handleChange.bind(this)} type=\"checkbox\" value={key} />{dictionary.countries[key]}</label>;\n                        })}\n                    </p>\n                    <p>\n                        <strong>Choose data</strong>\n                        {Object.keys(dictionary.dataSets).map(key => {\n                            return <label key={key}><input onChange={this.handleChange2.bind(this)} type=\"checkbox\" value={key} />{dictionary.dataSets[key]}</label>;\n                        })}\n                    </p>\n                </div>\n                <Graph dataWrapper={this.state.customDeaths} type=\"LineChart\" />\n                {/* <Graph data={this.state.sheetData} keys={[\"uk_total_sum\",\"uk_respiratory_sum\"]} type=\"LineChart\"/> */}\n            </div>\n        );\n    }\n}\n\nexport default Main;\n\n","import React from 'react';\nimport Header from './Header/Header';\nimport Footer from './Footer/Footer';\nimport Main from './Main/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}