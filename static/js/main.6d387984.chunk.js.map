{"version":3,"sources":["Header/Header.tsx","Main/Graph/Graph.tsx","util/API.tsx","util/DataProvider.tsx","Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","React","Component","Graph","colors","colorKey","countries","dataSets","nextProps","dataSetHelper","counter","dataWrapper","labels","dataKeys","forEach","key","substring","this","index","countryIndex","dataSetIndex","Fragment","props","type","data","strokeDasharray","stroke","dataKey","xAxis","map","getColor","className","aspect","buildGraph","csv","require","API","tabletop","worldData","Tabletop","init","simpleSheet","name","then","elements","fetch","response","text","fromString","worldDataRaw","filter","line","total_cases","totalCases","includes","iso_code","date","total_deaths","new_deaths","total_cases_per_million","toFixed","new_cases_per_million","total_deaths_per_million","new_deaths_per_million","prettyDate","Date","getMonth","getDate","arr","Object","keys","push","DataProvider","getCVD19CasesByCountry","cvd19deaths","wrapper","sort","first","second","firstDate","secondDate","getTime","getSheet","respiratoryDeaths","helperObjectRespiratoryDeaths","element","getDay","aggregatedData","time","uk_total_deaths","uk_total_sum","uk_respiratory_deaths","uk_respiratory_sum","console","log","Main","countryOptions","selected","value","label","displayOptions","state","sheetData","ukDeaths","customDeaths","compareCountries","showDataSets","getUKDeaths","setState","length","getCasesByCountry","country","e","target","checked","concat","indexOf","splice","processState","el","onChange","handleChange","bind","handleChange2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6d387984.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <header>\n            <h1>someta.xyz</h1>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n\n","import React from 'react';\n\nimport './Graph.css';\n\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\n\ntype MyProps = {\n    dataWrapper: {\n        data: Array<any>,\n        labels: any\n    }, type: String\n};\ntype MyState = {};\n\nclass Graph extends React.Component<MyProps, MyState> {\n    // colors = [\"#E0BBE4\",\"#957DAD\",\"#D291BC\",\"#FEC8D8\",\"#FFDFD3\"];\n    colors = [\n        [\"#9E0C3C\", \"#B01135\", \"#CD1B2D\", \"#E82322\", \"#FB291B\"], // reds\n        [\"#B478FF\", \"#826DE8\", \"#8592FF\", \"#6D9AE8\", \"#78CCFF\"], // blues\n        [\"#5FFF63\", \"#4AE87A\", \"#7EE84A\", \"#52FFB7\", \"#C7FF52\"], // greens\n        [\"#FF4DF2\", \"#E83A85\", \"#BF3AE8\", \"#9E40FF\", \"#7440FF\"], // purples\n        [\"#FF8E59\", \"#E89751\", \"#FFC265\", \"#E8BB51\", \"#FFDE59\"], // oranges\n        [\"#FFEA56\", \"#E8C443\", \"#E8E543\", \"#FFC54A\", \"#CAFF4A\"], // yellows\n        [\"#998AD3\", \"#E494D3\", \"#CDF1AF\", \"#87DCC0\", \"#88BBE4\"]\n    ]\n\n    colorKey = {\n        countries: { \"GBR\": 0, \"USA\": 1, \"DEU\": 2, \"AUT\": 3, \"ITA\": 4, \"JPN\": 5 },\n        dataSets: {}\n    }\n    componentWillReceiveProps(nextProps) {\n        let dataSetHelper = {};\n        let counter = 0;\n        nextProps.dataWrapper.labels.dataKeys.forEach(key => {\n            if (!dataSetHelper[key.substring(3)]) {\n                dataSetHelper[key.substring(3)] = counter;\n                counter++;\n            }\n        });\n        this.colorKey.dataSets = dataSetHelper;\n    }\n\n    getColor(key: String, index: number) {\n        let countryIndex = this.colorKey.countries[key.substring(0, 3)];\n        \n\n        let dataSetIndex = this.colorKey.dataSets[key.substring(3)]\n\n        return this.colors[countryIndex][dataSetIndex];\n    }\n    getDecoration() {\n        return <React.Fragment>\n\n        </React.Fragment>;\n    }\n    buildGraph() {\n        if (this.props.type === \"LineChart\") {\n            return (\n                <LineChart\n                    data={this.props.dataWrapper.data}>\n                    <CartesianGrid strokeDasharray=\"5 5\" stroke=\"#eee\" />\n                    <XAxis dataKey={this.props.dataWrapper.labels.xAxis} />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    {this.props.dataWrapper.labels.dataKeys.map((key, index) => {\n                        return <Line type=\"monotone\" key={key} dataKey={key} stroke={this.getColor(key, index)} />\n                    })}\n                </LineChart>);\n        }\n    }\n    render() {\n        return (\n            <div className=\"Graph\">\n                <div className=\"container\">\n                    <ResponsiveContainer aspect={1.6}>\n                        {this.buildGraph()}\n                    </ResponsiveContainer>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Graph;\n\n","\nimport Tabletop from 'tabletop';\nconst csv = require('csvtojson/v2');\n\n\nclass API {\n    tabletop: Tabletop;\n    worldData: any;\n    constructor() {\n        this.tabletop = Tabletop.init({\n            key: '1sAXPISlxdaxPIUAkua6Dxdd5DeWlUQ3fzx6Q9aGzfxY',\n            simpleSheet: false\n        });\n        this.worldData = false;\n    }\n    async getSheet(name) {\n        return this.tabletop.then((data, tabletop: Tabletop) => {\n            let entries = data[name].elements;\n            return entries;\n        });\n    }\n    async getCVD19CasesByCountry(countries: Array<String>) { // ISO CODES: \"GBR\", \"DEU\", \"USA\"\n        // iso_code,location,date,total_cases,new_cases,total_deaths,new_deaths,total_cases_per_million,new_cases_per_million,total_deaths_per_million,new_deaths_per_million,total_tests,new_tests,total_tests_per_thousand,new_tests_per_thousand,tests_units\n        if (!this.worldData)\n            this.worldData = fetch('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv')\n                .then(response => response.text());\n        return this.worldData.then(response => {\n            return csv()\n                .fromString(response)\n                .then((worldDataRaw) => {\n                    worldDataRaw = worldDataRaw.filter(line => {\n                        if (line.total_cases > 999) return true; // only return data where total cases\n                        return false;\n                    })\n                    let totalCases = {};\n                    worldDataRaw.forEach(line => {\n                        if (countries.includes(line.iso_code)) {\n                            if (!totalCases[line.date]) {\n                                totalCases[line.date] = { date: line.date };\n                            }\n                            totalCases[line.date][line.iso_code + \"_total_cases\"] = line.total_cases / 1000; // -> total cases in magnitudes of 1000\n                            totalCases[line.date][line.iso_code + \"_total_deaths\"] = (line.total_deaths / 1); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_new_deaths\"] = (line.new_deaths / 1); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_new_cases\"] = (line.new_deaths / 1); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_total_cases_per_million\"] = (line.total_cases_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_new_cases_per_million\"] = (line.new_cases_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_total_deaths_per_million\"] = (line.total_deaths_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[line.date][line.iso_code + \"_new_deaths_per_million\"] = (line.new_deaths_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            let prettyDate = new Date(line.date);\n                            totalCases[line.date].prettyDate = `${prettyDate.getMonth()+1}-${prettyDate.getDate()}`;\n                        }\n                    });\n                    let arr = [] as any;\n                    Object.keys(totalCases).forEach((key) => {\n                        arr.push(totalCases[key]);\n                    });\n                    return arr;\n                });\n        });\n\n    }\n}\n\nexport default API;\n","import API from './API'\n\nclass DataProvider {\n    API: API;\n    constructor() {\n        this.API = new API();\n    }\n    async getCasesByCountry(countries: Array<String>) {\n        let cvd19deaths = await this.API.getCVD19CasesByCountry(countries);\n        let wrapper: any = {};\n        cvd19deaths = cvd19deaths.sort((first, second) => {\n            let firstDate = new Date(first.date), secondDate = new Date(second.date);\n            return firstDate.getTime() - secondDate.getTime();\n        });\n        wrapper.data = cvd19deaths;\n        // let keys: Array<String> = [];\n        // countries.forEach(country => {\n        //     // keys.push(country + \"_cases\");\n        //     keys.push(country + \"_new_deaths\");\n        // });\n        wrapper.labels = {\n            xAxis: \"prettyDate\",\n            // dataKeys: keys\n        };\n        return wrapper;\n    }\n    async getUKDeaths() {\n        let wrapper: any = {};\n        let cvd19deaths = await this.API.getCVD19CasesByCountry([\"GBR\"]);\n        let respiratoryDeaths = await this.API.getSheet(\"regular_flu_deaths\");\n        let helperObjectRespiratoryDeaths: any = {};\n        respiratoryDeaths.forEach(element => {\n            let date = new Date(element.date);\n            helperObjectRespiratoryDeaths[date.getDay() + \"-\" + date.getMonth()] = element;\n        });\n\n        let aggregatedData = cvd19deaths.map((element) => {\n            let date = new Date(element.date);\n            let time = date.getMonth() + \"-\" + date.getDay();\n\n            if (helperObjectRespiratoryDeaths[time]) {\n                element.uk_total_deaths = helperObjectRespiratoryDeaths[time].uk_total_sum;\n                element.uk_respiratory_deaths = helperObjectRespiratoryDeaths[time].uk_respiratory_sum;\n            }\n            return element;\n        });\n        console.log(aggregatedData);\n\n        wrapper.data = aggregatedData;\n        wrapper.labels = {\n            xAxis: \"date\",\n            dataKeys: [\"GBRcases\", \"GBRdeaths\", \"uk_total_deaths\", \"uk_respiratory_deaths\"]\n        };\n        return wrapper;\n    }\n}\n\nexport default DataProvider;\n","import React from 'react';\nimport './Main.css';\nimport Graph from \"./Graph/Graph\";\nimport DataProvider from \"../util/DataProvider\";\n\ntype MyProps = {};\ntype MyState = {\n    DataProvider: DataProvider,\n    compareCountries: any,\n    showDataSets: any,\n    sheetData: Array<any>, customDeaths: any, ukDeaths: {\n        data: Array<any>,\n        labels: any\n    }\n};\n\nclass Main extends React.Component<MyProps, MyState> {\n    countryOptions = [\n        {\n            selected: false, value: 'USA', label: 'USA'\n        },\n        {\n            selected: false, value: 'GBR', label: 'United Kingdom'\n        },\n        {\n            selected: false, value: 'DEU', label: 'Germany'\n        },\n        {\n            selected: false, value: 'JPN', label: 'Japan'\n        },\n        {\n            selected: false, value: 'AUT', label: 'Austria'\n        },\n        {\n            selected: false, value: 'ITA', label: 'Italy'\n        }\n    ];\n    displayOptions = [\"total_deaths\", \"new_deaths\", \"total_cases\", \"new_cases\",\"total_cases_per_million\",\"new_cases_per_million\",\"total_deaths_per_million\",\"new_deaths_per_million\"];\n    constructor(props) {\n        super(props)\n        this.state = {\n            sheetData: [],\n            ukDeaths: { data: [], labels: { dataKeys: [] } },\n            customDeaths: { data: [], labels: { dataKeys: [] } },\n            DataProvider: new DataProvider(),\n            compareCountries: [],\n            showDataSets: []\n        }\n    }\n    componentDidMount() {\n        this.state.DataProvider.getUKDeaths().then((data) => {\n            this.setState({\n                ukDeaths: data\n            });\n        });\n        // .getSheet(\"regular_flu_deaths\").then((data) => {\n        //     console.log(\"sheetdata\", data);\n\n        //     this.setState({\n        //         sheetData: data\n        //     })\n        // });\n    }\n    processState() {\n        if (this.state.showDataSets.length > 0 && this.state.compareCountries.length > 0)\n            this.state.DataProvider.getCasesByCountry(this.state.compareCountries).then((data) => {\n                let wrapper = data;\n                wrapper.labels.dataKeys = [];\n                this.state.showDataSets.forEach(dataKey => {\n                    this.state.compareCountries.forEach(country => {\n                        wrapper.labels.dataKeys.push(country + \"_\" + dataKey);\n                    })\n                });\n                wrapper.labels.dataKeys.sort();\n                console.log(wrapper);\n\n                this.setState({\n                    customDeaths: wrapper\n                })\n            });\n    }\n    handleChange(e) {\n        let countries = this.state.compareCountries;\n        if (e.target.checked)\n            countries = countries.concat([e.target.value]);\n        else if (countries.indexOf(e.target.value) > -1)\n            countries.splice(countries.indexOf(e.target.value), 1);\n\n        this.setState({\n            compareCountries: countries\n        }, () => this.processState());\n    }\n    handleChange2(e) {\n        let dataSets = this.state.showDataSets;\n        if (e.target.checked)\n            dataSets = dataSets.concat([e.target.value]);\n        else if (dataSets.indexOf(e.target.value) > -1)\n            dataSets.splice(dataSets.indexOf(e.target.value), 1);\n        this.setState({\n            showDataSets: dataSets\n        }, () => this.processState());\n    }\n    render() {\n        return (\n            <div className=\"Main\">\n                <p>\n                    Compare different countries with each other.\n                </p>\n                <p>\n                    <strong>Choose countries</strong>\n                    {this.countryOptions.map(el => {\n                        return <label key={el.value}><input onChange={this.handleChange.bind(this)} type=\"checkbox\" value={el.value} />{el.label}</label>;\n                    })}\n                </p>\n                <p>\n                    <strong>Choose data</strong>\n                    {this.displayOptions.map(el => {\n                        return <label key={el}><input onChange={this.handleChange2.bind(this)} type=\"checkbox\" value={el} />{el}</label>;\n                    })}\n                </p>\n                <Graph dataWrapper={this.state.customDeaths} type=\"LineChart\" />\n                {/* <Graph data={this.state.sheetData} keys={[\"uk_total_sum\",\"uk_respiratory_sum\"]} type=\"LineChart\"/> */}\n            </div>\n        );\n    }\n}\n\nexport default Main;\n\n","import React from 'react';\nimport Header from './Header/Header';\nimport Main from './Main/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}