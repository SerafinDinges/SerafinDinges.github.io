{"version":3,"sources":["Header/Header.tsx","Footer/Footer.tsx","util/Dictionary.tsx","Main/Graph/Graph.tsx","util/API.tsx","util/DataProvider.tsx","SharedComponents/CustomSelect.tsx","Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","target","rel","href","React","Component","Footer","dictionary","countries","dataSets","comparisons","getMetaKey","key","country","substring","dataSet","dataSetKey","Graph","props","colors","state","colorKey","countryIndex","this","dataSetIndex","Math","floor","random","console","log","value","name","parseInt","toFixed","type","data","dataWrapper","strokeDasharray","stroke","dataKey","labels","xAxis","formatter","getToolTip","map","fill","getAreaColor","dataKeys","getColor","className","aspect","buildGraph","dataSetHelper","counter","forEach","csv","require","API","tabletop","worldData","Tabletop","init","simpleSheet","then","elements","fetch","response","text","fromString","worldDataRaw","totalCases","line","includes","iso_code","lineDate","Date","date","lineDateKey","getFullYear","getMonth","getDate","dateObject","weekday","getDay","total_cases","total_deaths","new_deaths","new_cases","total_cases_per_million","new_cases_per_million","total_deaths_per_million","new_deaths_per_million","prettyDate","arr","Object","keys","push","moment","DataProvider","getCVD19CasesByCountry","cvd19deaths","wrapper","sort","first","second","firstDate","secondDate","getTime","intervalStartDay","intervalDuration","slice","index","length","dayOfYear","splice","metaArray","finalArray","oneWeek","reduce","newDay","sum","getSheet","mainData","comparedData","intervalStart","baseData","reduceDataSetToInterval","element","dataIndex","comparison","animatedComponents","makeAnimated","CustomSelect","defaultValue","options","label","closeMenuOnSelect","components","isMulti","onChange","res","result","stateKey","Main","sheetData","customData","compareCountries","showDataSets","showComparisons","processState","getCasesByCountryAndDataset","getComparisonData","setState","newState","handleChange","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00b1fe37.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <header>\n                <h1>someta.xyz</h1>\n                <p>A tool to investigate data relating but not exclusive to Covid-19.</p>\n                <p><i>by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://serafin.tv\">Serafin Dinges</a></i></p>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n\n","import React from 'react';\nimport './Footer.css'\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <footer>\n                <hr />\n                <strong>Data sources:</strong>\n                <p>Biggest data source is <a rel=\"noopener noreferrer\" href=\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\" target=\"_blank\">this raw csv sheet</a> compiled by <i>Our World in Data</i>. See full documentation in <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/owid/covid-19-data/tree/master/public/data\">their repo</a>. They in turn get their data from the <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\"><i>European Centre for Disease Prevention and Control</i></a>.</p>\n                <p>Comparison data is aggregate from a variety of sources. You can have a look at the raw data in my manually transpiled, public <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.google.com/spreadsheets/d/1sAXPISlxdaxPIUAkua6Dxdd5DeWlUQ3fzx6Q9aGzfxY/edit?usp=sharing\">Google Sheets document</a>. Specific sources are provided in the sheet notes.</p>\n                <p>Additional data</p>\n                <ul>\n                    <li>\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.ons.gov.uk/peoplepopulationandcommunity/birthsdeathsandmarriages/deaths/datasets/weeklyprovisionalfiguresondeathsregisteredinenglandandwales\">UK respiratory deaths</a> from the <i>Office for National Statistics</i>\n                    </li>\n                    {/* <li>\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"\"></a>\n                    </li> */}\n                </ul>\n                <p>Peek at the source code: <a href=\"https://github.com/SerafinDinges/someta.xyz\">https://github.com/SerafinDinges/someta.xyz</a></p>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n\n","export { getMetaKey as default, getDataSetLabel };\nexport const dictionary = {\n    countries: {\n        \"GBR\": \"UK\",\n        \"DEU\": \"Germany\",\n        \"AUT\": \"Austria\",\n        \"USA\": \"USA\",\n        \"JPN\": \"Japan\",\n        \"ITA\": \"Italy\",\n        \"KOR\": \"South Korea\",\n        \"SWE\": \"Sweden\",\n    },\n    dataSets: {\n        \"new_deaths\": \"New deaths\",\n        \"new_cases\": \"New cases\",\n        \"total_deaths\": \"Total deaths\",\n        \"total_cases\": \"Total cases\",\n        // \"total_cases_per_million\": \"Total cases (per million inhabitants)\",\n        // \"new_cases_per_million\": \"New cases (per million inhabitants)\",\n        // \"total_deaths_per_million\": \"Total deaths (per million inhabitants)\",\n        // \"new_deaths_per_million\": \"New deaths (per million inhabitants)\"\n    },\n    comparisons: {\n        \"GBR_new_respiratory_deaths\": \"Weekly new respiratory deaths* in England and Wales (five year average)\",\n        \"GBR_new_overall_deaths\": \"Weekly new overall deaths in England and Wales (five year average)\",\n    }\n};\nfunction getMetaKey(key: string) {\n    let country = key.substring(0, 3);\n    let dataSet = key.substring(4);\n    let dataSetKey = false;\n    if (dictionary.comparisons[key]) dataSetKey = dictionary.comparisons[key];\n    else dataSetKey = dictionary.dataSets[dataSet];\n    return `${dictionary.countries[country]} - ${dataSetKey}`\n}\n\nfunction getDataSetLabel(key: string) {\n    if (dictionary.dataSets[key]) return dictionary.dataSets[key];\n    return \"Label not found\";\n}","import React from 'react';\n\nimport './Graph.css';\nimport getMetaKey from '../../util/Dictionary';\n\nimport {\n    ComposedChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Area\n} from 'recharts';\n\ntype MyProps = {\n    dataWrapper: {\n        data: Array<any>,\n        labels: any\n    }, type: String\n};\ntype MyState = {\n    colorKey: any\n};\n\nclass Graph extends React.Component<MyProps, MyState> {\n    colors = [\n\n        [\"#998AD3\", \"#E494D3\", \"#CDF1AF\", \"#87DCC0\", \"#88BBE4\"], // fallback\n        [\"#9E0C3C\", \"#B01135\", \"#CD1B2D\", \"#E82322\", \"#FB291B\"], // reds\n        [\"#B478FF\", \"#826DE8\", \"#8592FF\", \"#6D9AE8\", \"#78CCFF\"], // blues\n        [\"#5FFF63\", \"#4AE87A\", \"#7EE84A\", \"#52FFB7\", \"#C7FF52\"], // greens\n        [\"#FF4DF2\", \"#E83A85\", \"#BF3AE8\", \"#9E40FF\", \"#7440FF\"], // purples\n        [\"#FF8E59\", \"#E89751\", \"#FFC265\", \"#E8BB51\", \"#FFDE59\"], // oranges\n        [\"#FFEA56\", \"#E8C443\", \"#E8E543\", \"#FFC54A\", \"#CAFF4A\"], // yellows\n        [\"#E0BBE4\", \"#957DAD\", \"#D291BC\", \"#FEC8D8\", \"#FFDFD3\"], //unused\n        [\"#DEDE65\", \"#9BE386\", \"#5FE0B6\", \"#5AD4DE\", \"#95C1ED\", \"#D2A7DC\", \"#F591B2\", \"#F8897F\"] // comparison\n    ]\n    constructor(props) {\n        super(props);\n        this.state = {\n            colorKey: {\n                countries: { \"GBR\": 1, \"USA\": 2, \"DEU\": 3, \"AUT\": 4, \"ITA\": 5, \"JPN\": 6, \"KOR\": 7 },\n                dataSets: {}\n            }\n        }\n    }\n    static getDerivedStateFromProps(props, state) {\n        let dataSetHelper = {};\n        let counter = 0;\n        props.dataWrapper.labels.dataKeys.forEach(key => {\n            if (!dataSetHelper[key.substring(3)]) {\n                dataSetHelper[key.substring(3)] = counter;\n                counter++;\n            }\n        });\n        let comparisons = {};\n        if (props.dataWrapper.labels.comparisons) {\n            counter = 0;\n            props.dataWrapper.labels.comparisons.forEach(key => {\n                if (!comparisons[key]) {\n                    comparisons[key] = counter;\n                    counter++;\n                }\n            });\n        }\n        return ({\n            colorKey: {\n                countries: state.colorKey.countries,\n                dataSets: dataSetHelper,\n                comparisons: comparisons\n            }\n        });\n    }\n\n    getColor(key: String) {\n        let countryIndex = this.state.colorKey.countries[key.substring(0, 3)];\n        let dataSetIndex = this.state.colorKey.dataSets[key.substring(3)];\n        if (this.colors[countryIndex] && this.colors[countryIndex][dataSetIndex]) return this.colors[countryIndex][dataSetIndex];\n        else return this.colors[0][Math.floor(Math.random() * 5)];\n    }\n    getAreaColor(key: string) {\n        console.log(this.state.colorKey, key);\n\n        return this.colors[8][this.state.colorKey.comparisons[key]];\n    }\n    getToolTip(value, name) {\n        return [parseInt(value).toFixed(0), getMetaKey(name)];\n    }\n    buildGraph() {\n        if (this.props.type === \"LineChart\") {\n            return (\n                <ComposedChart\n                    data={this.props.dataWrapper.data}>\n                    <CartesianGrid strokeDasharray=\"5 5\" stroke=\"#eee\" />\n                    <XAxis dataKey={this.props.dataWrapper.labels.xAxis} />\n                    <YAxis />\n                    <Tooltip formatter={this.getToolTip} />\n                    <Legend formatter={getMetaKey} />\n                    {this.props.dataWrapper.labels.comparisons ? this.props.dataWrapper.labels.comparisons.map((key) => {\n                        return <Area type=\"monotone\" key={key} dataKey={key} fill={this.getAreaColor(key)} stroke={this.getAreaColor(key)} />\n                    }) : \"\"}\n                    {this.props.dataWrapper.labels.dataKeys.map((key) => {\n                        return <Line type=\"monotone\" key={key} dataKey={key} stroke={this.getColor(key)} />\n                    })}\n\n                </ComposedChart>);\n        }\n    }\n    render() {\n        return (\n            <div className=\"Graph\">\n                <div className=\"container\">\n                    <ResponsiveContainer aspect={1.9}>\n                        {this.buildGraph()}\n                    </ResponsiveContainer>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Graph;\n\n","\nimport Tabletop from 'tabletop';\nconst csv = require('csvtojson/v2');\n\n\nclass API {\n    tabletop: Tabletop;\n    worldData: any;\n    constructor() {\n        this.tabletop = Tabletop.init({\n            key: '1sAXPISlxdaxPIUAkua6Dxdd5DeWlUQ3fzx6Q9aGzfxY',\n            simpleSheet: false\n        });\n        this.worldData = false;\n    }\n    async getSheet(name) {\n        return this.tabletop.then((data, tabletop: Tabletop) => {\n            let entries = data[name].elements;\n            return entries;\n        });\n    }\n    async getCVD19CasesByCountry(countries: Array<String>) { // ISO CODES: \"GBR\", \"DEU\", \"USA\"\n        // iso_code,location,date,total_cases,new_cases,total_deaths,new_deaths,total_cases_per_million,new_cases_per_million,total_deaths_per_million,new_deaths_per_million,total_tests,new_tests,total_tests_per_thousand,new_tests_per_thousand,tests_units\n        if (!this.worldData)\n            this.worldData = fetch('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv')\n                .then(response => response.text());\n        return this.worldData.then(response => {\n            return csv()\n                .fromString(response)\n                .then((worldDataRaw) => {\n                    // worldDataRaw = worldDataRaw.filter(line => {\n                    //     if (line.total_cases > 999) return true; // only return data where total cases\n                    //     return false;\n                    // })\n                    let totalCases = {};\n                    worldDataRaw.forEach(line => {\n                        if (countries.includes(line.iso_code)) {\n                            let lineDate = new Date(line.date);\n                            let lineDateKey = `${lineDate.getFullYear()}-${lineDate.getMonth() + 1}-${lineDate.getDate()}`\n                            if (!totalCases[lineDateKey]) {\n                                totalCases[lineDateKey] = { date: lineDateKey, dateObject: lineDate };\n                            }\n                            totalCases[lineDateKey].weekday = lineDate.getDay();\n                            totalCases[lineDateKey][line.iso_code + \"_total_cases\"] = line.total_cases / 1000; // -> total cases in magnitudes of 1000\n                            totalCases[lineDateKey][line.iso_code + \"_total_deaths\"] = (line.total_deaths / 1); // -> total deaths in magnitudes of 1\n                            totalCases[lineDateKey][line.iso_code + \"_new_deaths\"] = (line.new_deaths / 1); // -> total deaths in magnitudes of 1\n                            totalCases[lineDateKey][line.iso_code + \"_new_cases\"] = (line.new_cases / 1); // -> total deaths in magnitudes of 1\n                            totalCases[lineDateKey][line.iso_code + \"_total_cases_per_million\"] = (line.total_cases_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[lineDateKey][line.iso_code + \"_new_cases_per_million\"] = (line.new_cases_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[lineDateKey][line.iso_code + \"_total_deaths_per_million\"] = (line.total_deaths_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[lineDateKey][line.iso_code + \"_new_deaths_per_million\"] = (line.new_deaths_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[lineDateKey].prettyDate = `${lineDate.getMonth() + 1}-${lineDate.getDate()}`;\n                        }\n                    });\n                    let arr = [] as any;\n                    Object.keys(totalCases).forEach((key) => {\n                        arr.push(totalCases[key]);\n                    });\n                    return arr;\n                });\n        });\n\n    }\n}\n\nexport default API;\n","import API from './API'\nconst moment = require('moment');\n\nclass DataProvider {\n    API: API;\n    constructor() {\n        this.API = new API();\n    }\n    async getCasesByCountryAndDataset(countries: Array<String>, dataSets: Array<String>) {\n        let cvd19deaths = await this.API.getCVD19CasesByCountry(countries);\n        let wrapper: any = {};\n        cvd19deaths = cvd19deaths.sort((first, second) => {\n            let firstDate = new Date(first.date), secondDate = new Date(second.date);\n            return firstDate.getTime() - secondDate.getTime();\n        });\n        wrapper.data = cvd19deaths;\n        wrapper.labels = {\n            xAxis: \"prettyDate\"\n        };\n        wrapper.labels.dataKeys = [];\n        dataSets.forEach(dataKey => {\n            countries.forEach(country => {\n                wrapper.labels.dataKeys.push(country + \"_\" + dataKey);\n            })\n        });\n        wrapper.labels.dataKeys.sort();\n        wrapper.labels.comparisons = [];\n        return wrapper;\n    }\n    reduceDataSetToInterval(arr, intervalStartDay, intervalDuration) {\n        console.log(\"transform to weekly\", arr.slice());\n        for (let index = 0; index < arr.length; index++) { // delete data until first incrementation\n            if (moment(arr[index].dateObject).dayOfYear() === (intervalStartDay - intervalDuration + 1)) { // start at the beginning of first duration of interval\n                console.log(moment(arr[index].dateObject).dayOfYear(), intervalStartDay, intervalDuration);\n                arr.splice(0, index);\n                break;\n            }\n        }\n        let metaArray: Array<Array<any>> = [];\n        while (arr.length) {\n            metaArray.push(arr.splice(0, intervalDuration));\n        }\n        // console.log(metaArray);\n        let finalArray = [] as any;\n        metaArray.forEach(oneWeek => {\n            finalArray.push(oneWeek.reduce((newDay, sum) => {\n                Object.keys(newDay).forEach(key => {\n                    if (key.includes(\"new\")) {\n                        sum[key] += parseInt(newDay[key]);\n                    }\n                });\n                return sum;\n            }));\n        });\n        console.log(\"fin\", finalArray);\n        return finalArray;\n    }\n    async getComparisonData(comparisons: Array<string>, wrapper: any) {\n        let mainData = await this.API.getSheet(\"main_data\");\n        console.log(comparisons, wrapper, mainData);\n        let comparedData: Array<any> = [];\n\n        // get interval of comparison data\n        let intervalStart = moment(mainData[0].date).dayOfYear();\n        let intervalDuration = moment(mainData[1].date).dayOfYear() - intervalStart;\n\n        let baseData = this.reduceDataSetToInterval(wrapper.data, intervalStart, intervalDuration);\n        mainData.forEach(element => {\n            let date = moment(element.date);\n            let dataIndex: number = -1;\n            baseData.forEach((value, index) => {\n                if (moment(value.dateObject).dayOfYear() === date.dayOfYear()) {\n                    dataIndex = index;\n                    return;\n                }\n            });\n\n            if (dataIndex > -1) {\n                comparisons.forEach(comparison => {\n                    baseData[dataIndex][comparison] = element[comparison];\n                });\n                comparedData.push(baseData[dataIndex]);\n            }\n        });\n        console.log(\"FINAL COMPARED\", comparedData);\n\n        wrapper.data = comparedData;\n        wrapper.labels.comparisons = comparisons;\n\n        // let wrapper: any = {};\n        // let respiratoryDeaths = await this.API.getSheet(\"regular_flu_deaths\");\n        // let helperObjectRespiratoryDeaths: any = {};\n        // respiratoryDeaths.forEach(element => {\n        //     let date = new Date(element.date);\n        //     helperObjectRespiratoryDeaths[date.getDay() + \"-\" + date.getMonth()] = element;\n        // });\n\n        // let aggregatedData = cvd19deaths.map((element) => {\n        //     let date = new Date(element.date);\n        //     let time = date.getMonth() + \"-\" + date.getDay();\n\n        //     if (helperObjectRespiratoryDeaths[time]) {\n        //         element.uk_total_deaths = helperObjectRespiratoryDeaths[time].uk_total_sum;\n        //         element.uk_respiratory_deaths = helperObjectRespiratoryDeaths[time].uk_respiratory_sum;\n        //     }\n        //     return element;\n        // });\n        // console.log(aggregatedData);\n\n        // wrapper.data = aggregatedData;\n        // wrapper.labels = {\n        //     xAxis: \"date\",\n        //     dataKeys: [\"GBRcases\", \"GBRdeaths\", \"uk_total_deaths\", \"uk_respiratory_deaths\"]\n        // };\n        return wrapper;\n    }\n}\n\nexport default DataProvider;\n","import React from 'react';\n\nimport CreatableSelect from 'react-select/creatable';\nimport makeAnimated from 'react-select/animated';\n\nconst animatedComponents = makeAnimated();\n\nexport default function CustomSelect(props) {\n    console.log(props);\n\n    let options: Array<any> = [];\n    let defaultValue;\n    Object.keys(props.options).forEach((key) => {\n        options.push({ value: key, label: props.options[key] });\n        if (key === props.value) defaultValue = { value: key, label: props.options[key] }\n    });\n    const onChange = res => {\n        let result = [];\n        if (res && res.length > 0)\n            res.forEach(element => {\n                result.push(element.value);\n            });\n        props.onChange(result, props.stateKey);\n    }\n    return (\n        <CreatableSelect\n            closeMenuOnSelect={false}\n            components={animatedComponents}\n            isMulti\n            defaultValue={defaultValue}\n            options={options}\n            onChange={onChange}\n        />\n    );\n}","import React from 'react';\nimport './Main.css';\nimport Graph from \"./Graph/Graph\";\nimport DataProvider from \"../util/DataProvider\";\nimport { dictionary } from \"../util/Dictionary\";\nimport CustomSelect from \"../SharedComponents/CustomSelect\";\n\ntype MyProps = {};\ntype MyState = {\n    compareCountries: any,\n    showDataSets: any,\n    showComparisons: any,\n    sheetData: Array<any>, customData: any\n};\n\nclass Main extends React.Component<MyProps, MyState> {\n    DataProvider: DataProvider;\n    constructor(props) {\n        super(props)\n        this.state = {\n            sheetData: [],\n            customData: { data: [], labels: { dataKeys: [] } },\n            compareCountries: [\"GBR\"],\n            showDataSets: [\"new_deaths\"],\n            showComparisons: []\n        }\n        this.DataProvider = new DataProvider();\n        this.processState();\n    }\n    processState() {\n        if (this.state.showDataSets.length > 0 && this.state.compareCountries.length > 0) {\n            this.DataProvider.getCasesByCountryAndDataset(this.state.compareCountries, this.state.showDataSets).then((wrapper) => {\n                console.log(\"before comparison\", wrapper, wrapper.data.slice());\n                if (this.state.showComparisons.length > 0) {\n                    this.DataProvider.getComparisonData(this.state.showComparisons, wrapper).then((wrapper) => {\n                        this.setState({\n                            customData: wrapper\n                        })\n                    });\n                }\n                else {\n                    this.setState({\n                        customData: wrapper\n                    })\n                }\n            });\n        }\n    }\n    handleChange(result, stateKey) {\n        console.log(result, stateKey);\n\n        let newState = {}\n        newState[stateKey] = result;\n\n        this.setState(newState, () => this.processState());\n    }\n    render() {\n        return (\n            <div className=\"Main\">\n                <div className=\"text\">\n                    <p>\n                        Compare different countries with each other.\n                    </p>\n                    <h3>Choose countries</h3>\n                    <CustomSelect options={dictionary.countries} stateKey=\"compareCountries\" value={this.state.compareCountries[0]} onChange={this.handleChange.bind(this)} />\n                    <h3>Choose data</h3>\n                    <CustomSelect options={dictionary.dataSets} stateKey=\"showDataSets\" value={this.state.showDataSets[0]} onChange={this.handleChange.bind(this)} />\n                    <h3>Compare to other data</h3>\n                    <CustomSelect options={dictionary.comparisons} stateKey=\"showComparisons\" onChange={this.handleChange.bind(this)} />\n                    <p className=\"footnote\">*refers to all types of respiratory deaths, see <a href=\"https://en.wikipedia.org/wiki/ICD-10_Chapter_X:_Diseases_of_the_respiratory_system\">ICD-10 J00-J99</a></p>\n                </div>\n                <Graph dataWrapper={this.state.customData} type=\"LineChart\" />\n            </div>\n        );\n    }\n}\n\nexport default Main;\n\n","import React from 'react';\nimport Header from './Header/Header';\nimport Footer from './Footer/Footer';\nimport Main from './Main/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}