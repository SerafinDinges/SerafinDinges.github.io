{"version":3,"sources":["Header/Header.tsx","Footer/Footer.tsx","util/Dictionary.tsx","Main/Graph/Graph.tsx","util/API.tsx","util/DataProvider.tsx","Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","target","rel","href","React","Component","Footer","dictionary","countries","dataSets","comparisons","getMetaKey","key","country","substring","dataSet","dataSetKey","Graph","props","colors","state","colorKey","countryIndex","this","dataSetIndex","Math","floor","random","value","name","parseInt","toFixed","type","data","dataWrapper","strokeDasharray","stroke","dataKey","labels","xAxis","formatter","getToolTip","map","fill","dataKeys","getColor","className","aspect","buildGraph","dataSetHelper","counter","forEach","csv","require","API","tabletop","worldData","Tabletop","init","simpleSheet","then","elements","fetch","response","text","fromString","worldDataRaw","totalCases","line","includes","iso_code","lineDate","Date","date","lineDateKey","getFullYear","getMonth","getDate","weekday","getDay","total_cases","total_deaths","new_deaths","new_cases","total_cases_per_million","new_cases_per_million","total_deaths_per_million","new_deaths_per_million","prettyDate","arr","Object","keys","push","moment","DataProvider","getCVD19CasesByCountry","cvd19deaths","wrapper","sort","first","second","firstDate","secondDate","getTime","intervalStartDay","intervalDuration","console","log","slice","index","length","dayOfYear","splice","metaArray","finalArray","oneWeek","reduce","newDay","sum","getSheet","mainData","comparedData","intervalStart","baseData","reduceDataSetToInterval","element","dataIndex","comparison","Main","sheetData","customData","compareCountries","showDataSets","showComparisons","getCasesByCountryAndDataset","getComparisonData","setState","e","checked","concat","indexOf","processState","compareTo","onChange","handleChange","bind","handleChange2","handleChange3","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a577678b.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <header>\n                <h1>someta.xyz</h1>\n                <p>A tool to investigate data relating but not exclusive to Covid-19.</p>\n                <p><i>by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://serafin.tv\">Serafin Dinges</a></i></p>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n\n","import React from 'react';\nimport './Footer.css'\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <footer>\n                <hr />\n                <strong>Data sources:</strong>\n                <p>Biggest data source is <a rel=\"noopener noreferrer\" href=\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\" target=\"_blank\">this raw csv sheet</a> compiled by <i>Our World in Data</i>. See full documentation in <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/owid/covid-19-data/tree/master/public/data\">their repo</a>. They in turn get their data from the <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\"><i>European Centre for Disease Prevention and Control</i></a>.</p>\n                <p>Comparison data is aggregate from a variety of sources. You can have a look at the raw data in my manually transpiled, public <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.google.com/spreadsheets/d/1sAXPISlxdaxPIUAkua6Dxdd5DeWlUQ3fzx6Q9aGzfxY/edit?usp=sharing\">Google Sheets document</a>. Specific sources are provided in the sheet notes.</p>\n                <p>Additional data</p>\n                <ul>\n                    <li>\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.ons.gov.uk/peoplepopulationandcommunity/birthsdeathsandmarriages/deaths/datasets/weeklyprovisionalfiguresondeathsregisteredinenglandandwales\">UK respiratory deaths</a> from the <i>Office for National Statistics</i>\n                    </li>\n                    {/* <li>\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"\"></a>\n                    </li> */}\n                </ul>\n                <p>Peek at the source code: <a href=\"https://github.com/SerafinDinges/someta.xyz\">https://github.com/SerafinDinges/someta.xyz</a></p>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n\n","export { getMetaKey as default, getDataSetLabel };\nexport const dictionary = {\n    countries: {\n        \"DEU\": \"Germany\",\n        \"GBR\": \"United Kingdom\",\n        \"AUT\": \"Austria\",\n        \"USA\": \"USA\",\n        \"JPN\": \"Japan\",\n        \"ITA\": \"Italy\",\n        \"KOR\": \"South Korea\",\n        \"SWE\": \"Sweden\",\n    },\n    dataSets: {\n        \"new_cases\": \"cases\",\n        \"new_deaths\": \"deaths\",\n        \"total_cases\": \"Total cases\",\n        \"total_deaths\": \"Total deaths\",\n        // \"total_cases_per_million\": \"Total cases (per million inhabitants)\",\n        // \"new_cases_per_million\": \"New cases (per million inhabitants)\",\n        // \"total_deaths_per_million\": \"Total deaths (per million inhabitants)\",\n        // \"new_deaths_per_million\": \"New deaths (per million inhabitants)\"\n    },\n    comparisons: {\n        \"new_respiratory_deaths\": \"Average new weekly respiratory deaths in the UK (last five years)\",\n        // \"respiratory_sum\": \"Total of average weekly respiratory deaths in the UK (pre cvd19)\",\n        \"new_overall_deaths\": \"Average new overall deaths in the UK (last five years)\",\n        // \"overall_deaths_sum\": \"Sum of average new overall deaths in the UK (last X years)\"\n    }\n};\nfunction getMetaKey(key: string) {\n    let country = key.substring(0, 3);\n    let dataSet = key.substring(4);\n    let dataSetKey = false;\n    if (dictionary.dataSets[dataSet]) dataSetKey = dictionary.dataSets[dataSet];\n    else dataSetKey = dictionary.comparisons[dataSet];\n    return `${dictionary.countries[country]}: ${dataSetKey}`\n}\n\nfunction getDataSetLabel(key: string) {\n    if (dictionary.dataSets[key]) return dictionary.dataSets[key];\n    return \"Label not found\";\n}","import React from 'react';\n\nimport './Graph.css';\nimport getMetaKey from '../../util/Dictionary';\n\nimport {\n    ComposedChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Area\n} from 'recharts';\n\ntype MyProps = {\n    dataWrapper: {\n        data: Array<any>,\n        labels: any\n    }, type: String\n};\ntype MyState = {\n    colorKey: any\n};\n\nclass Graph extends React.Component<MyProps, MyState> {\n    colors = [\n\n        [\"#998AD3\", \"#E494D3\", \"#CDF1AF\", \"#87DCC0\", \"#88BBE4\"], // fallback\n        [\"#9E0C3C\", \"#B01135\", \"#CD1B2D\", \"#E82322\", \"#FB291B\"], // reds\n        [\"#B478FF\", \"#826DE8\", \"#8592FF\", \"#6D9AE8\", \"#78CCFF\"], // blues\n        [\"#5FFF63\", \"#4AE87A\", \"#7EE84A\", \"#52FFB7\", \"#C7FF52\"], // greens\n        [\"#FF4DF2\", \"#E83A85\", \"#BF3AE8\", \"#9E40FF\", \"#7440FF\"], // purples\n        [\"#FF8E59\", \"#E89751\", \"#FFC265\", \"#E8BB51\", \"#FFDE59\"], // oranges\n        [\"#FFEA56\", \"#E8C443\", \"#E8E543\", \"#FFC54A\", \"#CAFF4A\"], // yellows\n        [\"#E0BBE4\", \"#957DAD\", \"#D291BC\", \"#FEC8D8\", \"#FFDFD3\"] //unused\n    ]\n    constructor(props) {\n        super(props);\n        this.state = {\n            colorKey: {\n                countries: { \"GBR\": 1, \"USA\": 2, \"DEU\": 3, \"AUT\": 4, \"ITA\": 5, \"JPN\": 6, \"KOR\": 7 },\n                dataSets: {}\n            }\n        }\n    }\n    static getDerivedStateFromProps(props, state) {\n        let dataSetHelper = {};\n        let counter = 0;\n        props.dataWrapper.labels.dataKeys.forEach(key => {\n            if (!dataSetHelper[key.substring(3)]) {\n                dataSetHelper[key.substring(3)] = counter;\n                counter++;\n            }\n        });\n        return ({\n            colorKey: {\n                countries: state.colorKey.countries,\n                dataSets: dataSetHelper\n            }\n        });\n    }\n\n    getColor(key: String) {\n        let countryIndex = this.state.colorKey.countries[key.substring(0, 3)];\n        let dataSetIndex = this.state.colorKey.dataSets[key.substring(3)];\n        if (this.colors[countryIndex] && this.colors[countryIndex][dataSetIndex]) return this.colors[countryIndex][dataSetIndex];\n        else return this.colors[0][Math.floor(Math.random() * 5)];\n    }\n    getToolTip(value, name) {\n        return [parseInt(value).toFixed(0), getMetaKey(name)];\n    }\n    buildGraph() {\n        if (this.props.type === \"LineChart\") {\n            return (\n                <ComposedChart\n                    data={this.props.dataWrapper.data}>\n                    <CartesianGrid strokeDasharray=\"5 5\" stroke=\"#eee\" />\n                    <XAxis dataKey={this.props.dataWrapper.labels.xAxis} />\n                    <YAxis />\n                    <Tooltip formatter={this.getToolTip} />\n                    <Legend formatter={getMetaKey} />\n                    {this.props.dataWrapper.labels.comparisons ? this.props.dataWrapper.labels.comparisons.map((key) => {\n                        return <Area type=\"monotone\" key={key} dataKey={key} fill='#8884d8' stroke='#8884d8' />\n                    }) : \"\"}\n                    {this.props.dataWrapper.labels.dataKeys.map((key) => {\n                        return <Line type=\"monotone\" key={key} dataKey={key} stroke={this.getColor(key)} />\n                    })}\n                </ComposedChart>);\n        }\n    }\n    render() {\n        return (\n            <div className=\"Graph\">\n                <div className=\"container\">\n                    <ResponsiveContainer aspect={1.9}>\n                        {this.buildGraph()}\n                    </ResponsiveContainer>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Graph;\n\n","\nimport Tabletop from 'tabletop';\nconst csv = require('csvtojson/v2');\n\n\nclass API {\n    tabletop: Tabletop;\n    worldData: any;\n    constructor() {\n        this.tabletop = Tabletop.init({\n            key: '1sAXPISlxdaxPIUAkua6Dxdd5DeWlUQ3fzx6Q9aGzfxY',\n            simpleSheet: false\n        });\n        this.worldData = false;\n    }\n    async getSheet(name) {\n        return this.tabletop.then((data, tabletop: Tabletop) => {\n            let entries = data[name].elements;\n            return entries;\n        });\n    }\n    async getCVD19CasesByCountry(countries: Array<String>) { // ISO CODES: \"GBR\", \"DEU\", \"USA\"\n        // iso_code,location,date,total_cases,new_cases,total_deaths,new_deaths,total_cases_per_million,new_cases_per_million,total_deaths_per_million,new_deaths_per_million,total_tests,new_tests,total_tests_per_thousand,new_tests_per_thousand,tests_units\n        if (!this.worldData)\n            this.worldData = fetch('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv')\n                .then(response => response.text());\n        return this.worldData.then(response => {\n            return csv()\n                .fromString(response)\n                .then((worldDataRaw) => {\n                    // worldDataRaw = worldDataRaw.filter(line => {\n                    //     if (line.total_cases > 999) return true; // only return data where total cases\n                    //     return false;\n                    // })\n                    let totalCases = {};\n                    worldDataRaw.forEach(line => {\n                        if (countries.includes(line.iso_code)) {\n                            let lineDate = new Date(line.date);\n                            let lineDateKey = `${lineDate.getFullYear()}-${lineDate.getMonth() + 1}-${lineDate.getDate()}`\n                            if (!totalCases[lineDateKey]) {\n                                totalCases[lineDateKey] = { date: lineDateKey };\n                            }\n                            totalCases[lineDateKey].weekday = lineDate.getDay();\n                            totalCases[lineDateKey][line.iso_code + \"_total_cases\"] = line.total_cases / 1000; // -> total cases in magnitudes of 1000\n                            totalCases[lineDateKey][line.iso_code + \"_total_deaths\"] = (line.total_deaths / 1); // -> total deaths in magnitudes of 1\n                            totalCases[lineDateKey][line.iso_code + \"_new_deaths\"] = (line.new_deaths / 1); // -> total deaths in magnitudes of 1\n                            totalCases[lineDateKey][line.iso_code + \"_new_cases\"] = (line.new_cases / 1); // -> total deaths in magnitudes of 1\n                            totalCases[lineDateKey][line.iso_code + \"_total_cases_per_million\"] = (line.total_cases_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[lineDateKey][line.iso_code + \"_new_cases_per_million\"] = (line.new_cases_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[lineDateKey][line.iso_code + \"_total_deaths_per_million\"] = (line.total_deaths_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[lineDateKey][line.iso_code + \"_new_deaths_per_million\"] = (line.new_deaths_per_million / 1).toFixed(); // -> total deaths in magnitudes of 100\n                            totalCases[lineDateKey].prettyDate = `${lineDate.getMonth() + 1}-${lineDate.getDate()}`;\n                        }\n                    });\n                    let arr = [] as any;\n                    Object.keys(totalCases).forEach((key) => {\n                        arr.push(totalCases[key]);\n                    });\n                    return arr;\n                });\n        });\n\n    }\n}\n\nexport default API;\n","import API from './API'\nconst moment = require('moment');\n\nclass DataProvider {\n    API: API;\n    constructor() {\n        this.API = new API();\n    }\n    async getCasesByCountryAndDataset(countries: Array<String>, dataSets: Array<String>) {\n        let cvd19deaths = await this.API.getCVD19CasesByCountry(countries);\n        let wrapper: any = {};\n        cvd19deaths = cvd19deaths.sort((first, second) => {\n            let firstDate = new Date(first.date), secondDate = new Date(second.date);\n            return firstDate.getTime() - secondDate.getTime();\n        });\n        wrapper.data = cvd19deaths;\n        wrapper.labels = {\n            xAxis: \"prettyDate\"\n        };\n        wrapper.labels.dataKeys = [];\n        dataSets.forEach(dataKey => {\n            countries.forEach(country => {\n                wrapper.labels.dataKeys.push(country + \"_\" + dataKey);\n            })\n        });\n        wrapper.labels.dataKeys.sort();\n        wrapper.labels.comparisons = [];\n        return wrapper;\n    }\n    reduceDataSetToInterval(arr, intervalStartDay, intervalDuration) {\n        console.log(\"transform to weekly\", arr.slice());\n        for (let index = 0; index < arr.length; index++) { // delete data until first incrementation\n            if (moment(arr[index].date).dayOfYear() === (intervalStartDay - intervalDuration + 1)) { // start at the beginning of first duration of interval\n                console.log(moment(arr[index].date).dayOfYear(), intervalStartDay, intervalDuration);\n                arr.splice(0, index);\n                break;\n            }\n        }\n        let metaArray: Array<Array<any>> = [];\n        while (arr.length) {\n            metaArray.push(arr.splice(0, intervalDuration));\n        }\n        // console.log(metaArray);\n        let finalArray = [] as any;\n        metaArray.forEach(oneWeek => {\n            finalArray.push(oneWeek.reduce((newDay, sum) => {\n                Object.keys(newDay).forEach(key => {\n                    if (key.includes(\"new\")) {\n                        sum[key] += parseInt(newDay[key]);\n                    }\n                });\n                return sum;\n            }));\n        });\n        console.log(\"fin\", finalArray);\n        return finalArray;\n    }\n    async getComparisonData(comparisons: Array<string>, wrapper: any) {\n        let mainData = await this.API.getSheet(\"main_data\");\n        console.log(comparisons, wrapper, mainData);\n        let comparedData: Array<any> = [];\n\n        // get interval of comparison data\n        let intervalStart = moment(mainData[0].date).dayOfYear();\n        let intervalDuration = moment(mainData[1].date).dayOfYear() - intervalStart;\n\n        let baseData = this.reduceDataSetToInterval(wrapper.data, intervalStart, intervalDuration);\n        mainData.forEach(element => {\n            let date = moment(element.date);\n            let dataIndex: number = -1;\n            baseData.forEach((value, index) => {\n                if (moment(value.date).dayOfYear() === date.dayOfYear()) {\n                    dataIndex = index;\n                    return;\n                }\n            });\n\n            if (dataIndex > -1) {\n                comparisons.forEach(comparison => {\n                    baseData[dataIndex][comparison] = element[comparison];\n                });\n                comparedData.push(baseData[dataIndex]);\n            }\n        });\n        console.log(\"FINAL COMPARED\", comparedData);\n\n        wrapper.data = comparedData;\n        wrapper.labels.comparisons = comparisons;\n\n        // let wrapper: any = {};\n        // let respiratoryDeaths = await this.API.getSheet(\"regular_flu_deaths\");\n        // let helperObjectRespiratoryDeaths: any = {};\n        // respiratoryDeaths.forEach(element => {\n        //     let date = new Date(element.date);\n        //     helperObjectRespiratoryDeaths[date.getDay() + \"-\" + date.getMonth()] = element;\n        // });\n\n        // let aggregatedData = cvd19deaths.map((element) => {\n        //     let date = new Date(element.date);\n        //     let time = date.getMonth() + \"-\" + date.getDay();\n\n        //     if (helperObjectRespiratoryDeaths[time]) {\n        //         element.uk_total_deaths = helperObjectRespiratoryDeaths[time].uk_total_sum;\n        //         element.uk_respiratory_deaths = helperObjectRespiratoryDeaths[time].uk_respiratory_sum;\n        //     }\n        //     return element;\n        // });\n        // console.log(aggregatedData);\n\n        // wrapper.data = aggregatedData;\n        // wrapper.labels = {\n        //     xAxis: \"date\",\n        //     dataKeys: [\"GBRcases\", \"GBRdeaths\", \"uk_total_deaths\", \"uk_respiratory_deaths\"]\n        // };\n        return wrapper;\n    }\n}\n\nexport default DataProvider;\n","import React from 'react';\nimport './Main.css';\nimport Graph from \"./Graph/Graph\";\nimport DataProvider from \"../util/DataProvider\";\nimport { dictionary } from \"../util/Dictionary\";\n\ntype MyProps = {};\ntype MyState = {\n    compareCountries: any,\n    showDataSets: any,\n    showComparisons: any,\n    sheetData: Array<any>, customData: any\n};\n\nclass Main extends React.Component<MyProps, MyState> {\n    DataProvider: DataProvider;\n    constructor(props) {\n        super(props)\n        this.state = {\n            sheetData: [],\n            customData: { data: [], labels: { dataKeys: [] } },\n            compareCountries: [],\n            showDataSets: [],\n            showComparisons: []\n        }\n        this.DataProvider = new DataProvider();\n    }\n    processState() {\n        if (this.state.showDataSets.length > 0 && this.state.compareCountries.length > 0) {\n            this.DataProvider.getCasesByCountryAndDataset(this.state.compareCountries, this.state.showDataSets).then((wrapper) => {\n                console.log(\"before comparison\", wrapper, wrapper.data.slice());\n                if (this.state.showComparisons.length > 0) {\n                    this.DataProvider.getComparisonData(this.state.showComparisons, wrapper).then((wrapper) => {\n                        this.setState({\n                            customData: wrapper\n                        })\n                    });\n                }\n                else {\n                    this.setState({\n                        customData: wrapper\n                    })\n                }\n            });\n        }\n    }\n    handleChange(e) {\n        let countries = this.state.compareCountries;\n        if (e.target.checked)\n            countries = countries.concat([e.target.value]);\n        else if (countries.indexOf(e.target.value) > -1)\n            countries.splice(countries.indexOf(e.target.value), 1);\n\n        this.setState({\n            compareCountries: countries\n        }, () => this.processState());\n    }\n    handleChange2(e) {\n        let dataSets = this.state.showDataSets;\n        if (e.target.checked)\n            dataSets = dataSets.concat([e.target.value]);\n        else if (dataSets.indexOf(e.target.value) > -1)\n            dataSets.splice(dataSets.indexOf(e.target.value), 1);\n        this.setState({\n            showDataSets: dataSets\n        }, () => this.processState());\n    }\n    handleChange3(e) {\n        let compareTo = this.state.showComparisons;\n        if (e.target.checked)\n            compareTo = compareTo.concat([e.target.value]);\n        else if (compareTo.indexOf(e.target.value) > -1)\n            compareTo.splice(compareTo.indexOf(e.target.value), 1);\n        this.setState({\n            showComparisons: compareTo\n        }, () => this.processState());\n    }\n    render() {\n        return (\n            <div className=\"Main\">\n                <div className=\"text\">\n                    <p>\n                        Compare different countries with each other.\n                </p>\n                    <p>\n                        <strong>Choose countries</strong>\n                        {Object.keys(dictionary.countries).map((key) => {\n                            return <label key={key}><input onChange={this.handleChange.bind(this)} type=\"checkbox\" value={key} />{dictionary.countries[key]}</label>;\n                        })}\n                    </p>\n                    <p>\n                        <strong>Choose data</strong>\n                        {Object.keys(dictionary.dataSets).map(key => {\n                            return <label key={key}><input onChange={this.handleChange2.bind(this)} type=\"checkbox\" value={key} />{dictionary.dataSets[key]}</label>;\n                        })}\n                    </p>\n                    <p>\n                        <strong>Compare to all respiratory disease deaths (<a href=\"https://en.wikipedia.org/wiki/ICD-10_Chapter_X:_Diseases_of_the_respiratory_system\">ICD-10 J00-J99</a>)</strong> (will switch to weekly data)\n                        {Object.keys(dictionary.comparisons).map(key => {\n                            return <label key={key}><input onChange={this.handleChange3.bind(this)} type=\"checkbox\" value={\"GBR_\" + key} />{dictionary.comparisons[key]}</label>;\n                        })}\n                    </p>\n                </div>\n                <Graph dataWrapper={this.state.customData} type=\"LineChart\" />\n                {/* <Graph data={this.state.sheetData} keys={[\"uk_total_sum\",\"uk_respiratory_sum\"]} type=\"LineChart\"/> */}\n            </div>\n        );\n    }\n}\n\nexport default Main;\n\n","import React from 'react';\nimport Header from './Header/Header';\nimport Footer from './Footer/Footer';\nimport Main from './Main/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}